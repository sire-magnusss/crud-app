{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport ItemForm from './components/ItemForm';\nimport ItemList from './components/ItemList';\nimport './styles.css'; // Import the custom CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [items, setItems] = useState([]);\n\n  // Fetch items from the backend when the component mounts\n  useEffect(() => {\n    const fetchItems = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/items');\n        const data = await response.json();\n        setItems(data); // Set the fetched items to the state\n      } catch (error) {\n        console.error('Error fetching items:', error);\n      }\n    };\n    fetchItems();\n  }, []);\n\n  // Function to add a new item\n  const addItem = async item => {\n    try {\n      const response = await fetch('http://localhost:5000/items', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item) // Send the item data as JSON\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add item');\n      }\n      const newItem = await response.json();\n      setItems([...items, newItem]); // Update the state with the new item\n    } catch (error) {\n      console.error('Error adding item:', error);\n    }\n  };\n\n  // Function to delete an item\n  const deleteItem = async index => {\n    const itemToDelete = items[index]; // Get the item from the array\n    try {\n      await fetch(`http://localhost:5000/items/${itemToDelete._id}`, {\n        // Use the correct _id\n        method: 'DELETE'\n      });\n      setItems(items.filter((_, i) => i !== index)); // Remove the item from the state\n    } catch (error) {\n      console.error('Error deleting item:', error);\n    }\n  };\n\n  // Function to update an item\n  const updateItem = async (index, updatedItem) => {\n    const itemToUpdate = items[index];\n    try {\n      await fetch(`http://localhost:5000/items/${itemToUpdate._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedItem)\n      });\n      const newItems = [...items];\n      newItems[index] = updatedItem; // Update the state with the edited item\n      setItems(newItems);\n    } catch (error) {\n      console.error('Error updating item:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Item Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ItemForm, {\n      addItem: addItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ItemList, {\n      items: items,\n      removeItem: deleteItem,\n      updateItem: updateItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ItemForm","ItemList","jsxDEV","_jsxDEV","App","_s","items","setItems","fetchItems","response","fetch","data","json","error","console","addItem","item","method","headers","body","JSON","stringify","ok","Error","newItem","deleteItem","index","itemToDelete","_id","filter","_","i","updateItem","updatedItem","itemToUpdate","newItems","className","children","fileName","_jsxFileName","lineNumber","columnNumber","removeItem","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport ItemForm from './components/ItemForm';\r\nimport ItemList from './components/ItemList';\r\n\r\nimport './styles.css';  // Import the custom CSS\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n\r\n    // Fetch items from the backend when the component mounts\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/items');\r\n                const data = await response.json();\r\n                setItems(data);  // Set the fetched items to the state\r\n            } catch (error) {\r\n                console.error('Error fetching items:', error);\r\n            }\r\n        };\r\n        fetchItems();\r\n    }, []);\r\n\r\n    // Function to add a new item\r\n    const addItem = async (item) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/items', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(item),  // Send the item data as JSON\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add item');\r\n            }\r\n\r\n            const newItem = await response.json();\r\n            setItems([...items, newItem]);  // Update the state with the new item\r\n        } catch (error) {\r\n            console.error('Error adding item:', error);\r\n        }\r\n    };\r\n\r\n    // Function to delete an item\r\n    const deleteItem = async (index) => {\r\n        const itemToDelete = items[index];  // Get the item from the array\r\n        try {\r\n            await fetch(`http://localhost:5000/items/${itemToDelete._id}`, {  // Use the correct _id\r\n                method: 'DELETE',\r\n            });\r\n            setItems(items.filter((_, i) => i !== index));  // Remove the item from the state\r\n        } catch (error) {\r\n            console.error('Error deleting item:', error);\r\n        }\r\n    };\r\n\r\n    // Function to update an item\r\n    const updateItem = async (index, updatedItem) => {\r\n        const itemToUpdate = items[index];\r\n        try {\r\n            await fetch(`http://localhost:5000/items/${itemToUpdate._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedItem),\r\n            });\r\n            const newItems = [...items];\r\n            newItems[index] = updatedItem;  // Update the state with the edited item\r\n            setItems(newItems);\r\n        } catch (error) {\r\n            console.error('Error updating item:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Item Management</h1>\r\n            <ItemForm addItem={addItem} />\r\n            <ItemList items={items} removeItem={deleteItem} updateItem={updateItem} />  {/* Pass updateItem */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}